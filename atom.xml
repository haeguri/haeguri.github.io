<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haeguri 블로그</title>
  
  <subtitle>기록하기 위한 블로그</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/haeguri/"/>
  <updated>2018-07-10T16:40:29.000Z</updated>
  <id>https://github.com/haeguri/</id>
  
  <author>
    <name>Haegyun Jung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>자바스크립트 변수 스코프(Scope) - 1</title>
    <link href="https://github.com/haeguri/2018/06/25/js-scope/"/>
    <id>https://github.com/haeguri/2018/06/25/js-scope/</id>
    <published>2018-06-25T14:19:11.000Z</published>
    <updated>2018-07-10T16:40:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>변수가 어떤 스코프로 선언되는가에 따라서 그 변수에 접근할 수 있는 유효 범위가 달라진다. 프로그래밍 언어들은 저마다의 스코프 형성 규칙을 갖고 있는데 자바스크립트도 역시 자신만의 규칙을 갖고 있다. 자바스크립트에서 사용되는 변수의 스코프는 크게 전역 스코프(Global Scope)와 지역 스코프(Local Scope)로 나뉜다.</p><h2 id="전역-스코프"><a href="#전역-스코프" class="headerlink" title="전역 스코프"></a>전역 스코프</h2><p>전역 스코프는 모든 자바스크립트 코드에서 접근할 수 있는 영역이다. 전역 스코프에 전역 변수를 선언하면 해당 변수 또한 어디서든 접근 가능하다. 전역 변수를 선언하는 기본적인 방법은 <code>var</code> 키워드로 함수 밖에서 변수를 선언하는 것이다.</p><h4 id="전역변수-선언-var"><a href="#전역변수-선언-var" class="headerlink" title="전역변수 선언 (var)"></a>전역변수 선언 (<code>var</code>)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var globalA = 1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function print() &#123;</span></span><br><span class="line"><span class="undefined">        console.log(globalA);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(globalA);</span></span><br><span class="line"><span class="undefined">    print();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(globalA);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ 실행결과 ]</span><br><span class="line">----------</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="전역변수-선언-window"><a href="#전역변수-선언-window" class="headerlink" title="전역변수 선언 (window)"></a>전역변수 선언 (<code>window</code>)</h4><p>전역변수를 선언하는 또 다른 방법이 있는데, 자바스크립트 내장 객체인 <code>window</code> 객체의 프로퍼티에 전역 변수로 사용할 데이터를 추가하는 방법이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.globalA = 1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    function print() &#123; </span></span><br><span class="line"><span class="undefined">        console.log(globalA); </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(globalA);</span></span><br><span class="line"><span class="undefined">    print();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(globalA); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ 실행결과 ]</span><br><span class="line">----------</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><code>window</code> 객체의 프로퍼티로 <code>globalA</code>를 추가하면, 앞에서 <code>var</code>로 선언한 것과 동일하게 전역변수로서 사용할 수 있게 된다. 반대로 <code>var</code>로 전역 변수를 선언하더라도 <code>window</code> 객체의 프로퍼티로 추가되는데, 이것은 <code>Object.prototype.hasOwnProperty</code> 메서드로 확인해볼 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var globalA = 1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">console.log(window.hasOwnProperty(‘globalA’));</span></span><br><span class="line"><span class="undefined">console.log(window.globalA === 1); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ 실행결과 ]</span><br><span class="line">----------</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>전역 변수는 모든 자바스크립트에서 접근이 가능한 만큼 전역 스코프를 공유하는 다른 스크립트 사이에서 충돌이 일어날 가능성이 있다. 최근에는 위의 예제처럼 모듈화 없이 자바스크립트를 사용하는 경우는 거의 없지만, 혹시라도 전역변수를 선언해야 할 경우에는 신중하게 고려하고 선언해야 한다.</p><h2 id="지역-스코프"><a href="#지역-스코프" class="headerlink" title="지역 스코프"></a>지역 스코프</h2><p>지역 스코프의 유효 범위는 전역 스코프와 달리 일부로 한정되어 있다. 지역 변수를 선언할 수 있는 지역 스코프는 <strong>함수 스코프</strong>와 ECMAScript 2015부터 추가된 <strong>블록 스코프</strong>가 있다.</p><h4 id="함수-스코프-Function-Scope"><a href="#함수-스코프-Function-Scope" class="headerlink" title="함수 스코프 (Function Scope)"></a>함수 스코프 (Function Scope)</h4><p>함수 스코프로 변수를 선언하면 그 변수는 변수를 선언한 함수 안에서만 접근할 수 있다. 즉, 함수 외부에서는 변수에 접근할 수 없게 된다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> localA = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(localA); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(); </span><br><span class="line"><span class="built_in">console</span>.log(localA); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ 실행결과 ]</span><br><span class="line">----------</span><br><span class="line">1</span><br><span class="line">Uncaught ReferenceError: localA is not defined</span><br></pre></td></tr></table></figure><p>위의 코드를 살펴보면 <code>f1</code> 함수의 본문에서 <code>localA</code>를 선언하고, <code>localA</code>를 출력하고 있다. 그리고 <code>f1</code> 함수를 실행해보면 <code>localA</code>가 <code>f1</code> 함수의 스코프에서 선언되었으므로 로그는 정상적으로 출력된다. 하지만 <code>f1</code> 함수 외부에서 <code>localA</code> 변수의 값을 출력하려고 시도했을 때, 함수의 외부에서는 <code>localA</code>가 정의되지 않았기 때문에 에러가 발생했다.</p><h4 id="중첩된-함수-스코프"><a href="#중첩된-함수-스코프" class="headerlink" title="중첩된 함수 스코프"></a>중첩된 함수 스코프</h4><p>한 개의 함수가 아니라, 두 개의 함수가 중첩된 상황에서는 어떻게 될까? </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> localA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> localB = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(localA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f2();</span><br><span class="line">    <span class="built_in">console</span>.log(localB)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ 실행결과 ]</span><br><span class="line">----------</span><br><span class="line">1</span><br><span class="line">Uncaught ReferenceError: localB is not defined</span><br></pre></td></tr></table></figure><p>실행 결과를 보면 내부 함수 <code>f2</code>(<strong>내부 스코프</strong>)에서는 외부 함수 <code>f1</code>(<strong>외부 스코프</strong>)에서 선언된 변수에 접근할 수 있는 것을 확인할 수 있다. 하지만 외부 스코프에서는 내부 스코프에서 선언된 변수에 접근할 수 없다.</p><h4 id="지역-스코프의-형성"><a href="#지역-스코프의-형성" class="headerlink" title="지역 스코프의 형성"></a>지역 스코프의 형성</h4><p>지역 스코프는 자바스크립트 코드가 실행되면서 결정되지 않는다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> localA = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(A);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(localA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1();</span><br><span class="line">f2();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 실행결과 ]</span><br></pre></td></tr></table></figure><p>지역 변수의 스코프는 실행되는 런타임에 동적으로 형성되는 것이 아니라 정적으로 이뤄진다. 그 이유는 자바스크립트가 정적으로 스코프가 형성되기 때문인데, 다른 말로 렉시컬 스코핑(Lexical Scoping)이라고 한다.</p><h4 id="블록-스코프"><a href="#블록-스코프" class="headerlink" title="블록 스코프"></a>블록 스코프</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;변수가 어떤 스코프로 선언되는가에 따라서 그 변수에 접근할 수 있는 유효 범위가 달라진다. 프로그래밍 언어들은 저마다의 스코프 형성 규칙을 갖고 있는데 자바스크립트도 역시 자신만의 규칙을 갖고 있다. 자바스크립트에서 사용되는 변수의 스코프는 크게
      
    
    </summary>
    
    
  </entry>
  
</feed>
