<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haeguri Devlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/haeguri/"/>
  <updated>2018-08-26T10:15:41.000Z</updated>
  <id>https://github.com/haeguri/</id>
  
  <author>
    <name>Haegyun Jung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>( 번역 ) Styled Component Tips and Tricks</title>
    <link href="https://github.com/haeguri/2018/08/20/styled-component-tips/"/>
    <id>https://github.com/haeguri/2018/08/20/styled-component-tips/</id>
    <published>2018-08-20T13:56:24.000Z</published>
    <updated>2018-08-26T10:15:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>styled-components</code>는 React 컴포넌트를 스타일링하기 위한 라이브러리다.<br>개인 프로젝트에 이 라이브러리를 적용하기 위한 자료를 찾던 중 <a href="https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md">유용한 팁을 다룬 문서</a>를 발견해서 번역하였다.</p></blockquote><h3 id="컴포넌트-조정"><a href="#컴포넌트-조정" class="headerlink" title="컴포넌트 조정"></a>컴포넌트 조정</h3><p><code>0.5em 2em</code>의 <code>padding</code>을 가지는 <code>&lt;Button&gt;</code> 컴포넌트가 있다고 하자.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`    padding: 0.5em 2em;    /* ... */`</span></span><span class="token punctuation">;</span></code></pre><p>이제 디자이너가 기사에 새로운 덧글 섹션을 추가했고, 덧글 섹션의 버튼을 일반 섹션보다 작게 만들고 싶다.</p><p>삽입되는 함수를 이용하면 버튼 사이즈를 조정하는 것은 쉽다.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`    /* 작은 버튼에는 padding을 더 작게 적용한다면 */    padding: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>small <span class="token operator">?</span> <span class="token string">'0.25em 1em'</span> <span class="token punctuation">:</span> <span class="token string">'0.5em 2em'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    /* ... */`</span></span><span class="token punctuation">;</span></code></pre><p>그러면 덧글 섹션에서는 <code>&lt;Button&gt;</code>이 작아야 함을 쉽게 표현할 수 있다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span>This is a normal button<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">small</span><span class="token punctuation">></span></span>This is a small button<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span></code></pre><h3 id="자바스크립트를-사용하기"><a href="#자바스크립트를-사용하기" class="headerlink" title="자바스크립트를 사용하기"></a>자바스크립트를 사용하기</h3><p>텍스트가 컨테이너 요소의 넓이보다 길어서 해당 라인의 오버플로를 생략기호(<code>…</code>)로 처리하고 싶을 때, 세 가지의 CSS 프로퍼티가 필요하다.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.truncate</span> </span><span class="token punctuation">{</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>컨테이너 요소의 넓이도 또한 명확하게 설정되어야 할 필요가 있다.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.truncate</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 특정한 넓이가 되어야 한다 */</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>끝을 잘라내는 별개의 컴포넌트를 만들 수 있지만, 여기서 CSS를 재사용하는 것은 나쁜 아이디어가 아니다. 끝을 잘라내려고 하는 모든 컴포넌트에서 앞의 CSS 코드를 하드코딩하는 것 대신에 다음의 함수를 작성할 수 있다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// style-utils.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">truncate</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`        width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;        white-space: nowrap;        overflow: hidden;        text-overflow: ellipsis;    `</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>그러면 다음과 같이 같이 사용할 수 있다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> truncate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../style-utils'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// div가 텍스트를 생략부호로 잘라내게 만든다.</span><span class="token keyword">const</span> Box <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">'250px'</span><span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    background: papayawhip;`</span></span><span class="token punctuation">;</span></code></pre><p>어떠한가? 이것은 Sass의 믹스인(mixin)과 정확하게 같다. (CSS 위에 임의로 추가 된 구문이 아니라는 것만 제외하면 이것은 단지 자바스크립트다)</p><h2 id="더욱-강력한-예제"><a href="#더욱-강력한-예제" class="headerlink" title="더욱 강력한 예제"></a>더욱 강력한 예제</h2><p>Sass 믹스인의 강력한 기능 중 하나는 <code>@content</code>다. <code>@content</code>는 React 컴포넌트로 <code>props.children</code>을 넘기는 것과 비슷하게 동작한다.</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@mixin</span> handheld</span> <span class="token punctuation">{</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 420px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token atrule"><span class="token rule">@include</span> handheld</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>우리는 자바스크립트가 있으니, 더 강력한 것을 할 수 있다.</p><pre class=" language-css"><code class="language-css"><span class="token selector">// style-utils<span class="token class">.js</span>import </span><span class="token punctuation">{</span> css <span class="token punctuation">}</span> <span class="token selector">from 'styled-components'export const media = </span><span class="token punctuation">{</span>    <span class="token property">handheld</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">...</span>args<span class="token punctuation">)</span> => css`        <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 420px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>            <span class="token selector">$</span><span class="token punctuation">{</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token number">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    `<span class="token punctuation">}</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> media <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../style-utils'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 휴대용 디바이스에서 텍스트의 크기를 줄인</span><span class="token keyword">const</span> Box <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`    font-size: 16px;    ${ media.handheld`</span></span>        font<span class="token operator">-</span>size<span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token template-string"><span class="token string">` }`</span></span><span class="token punctuation">;</span></code></pre><p>혹시 <code>css</code>가 위의 예제에서 필요한 이유가 분명하지 않은가? <a href="https://www.styled-components.com/docs/advanced#tagged-template-literals" target="_blank" rel="noopener">Tagged Template Literals</a> 글을 확인해라.</p><h4 id="미디어-템플릿"><a href="#미디어-템플릿" class="headerlink" title="미디어 템플릿"></a>미디어 템플릿</h4><p>자바스크립트의 기능적인 특성으로 우리는 미디어 쿼리에서 스타일을 감싸기 위한 Tagged Template Literal을 쉽게 정의할 수 있다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token comment" spellcheck="true">// 여기에 있는 사이즈는 임의적이며 원하는 값으로 설정해도 관계없다.</span><span class="token keyword">const</span> sizes <span class="token operator">=</span> <span class="token punctuation">{</span>    giant<span class="token punctuation">:</span> <span class="token number">1170</span><span class="token punctuation">,</span>    desktop<span class="token punctuation">:</span> <span class="token number">992</span><span class="token punctuation">,</span>    tablet<span class="token punctuation">:</span> <span class="token number">768</span><span class="token punctuation">,</span>    phone<span class="token punctuation">:</span> <span class="token number">376</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// `sizes`를 순회하며 미디어 템플릿을 만든다.</span><span class="token keyword">export</span> <span class="token keyword">const</span> media <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>sizes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 크로스 브라우징을 적절하게 하기 위해 중단점에서 em을 사용하고,</span>    <span class="token comment" spellcheck="true">// 사용자가 브라우저의 글꼴 크기를 변경하도록 지원한다. :https://zellwk.com/blog/media-query-units/</span>    <span class="token keyword">const</span> emSize <span class="token operator">=</span> sizes<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">16</span>    accumulator<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> css<span class="token template-string"><span class="token string">`        @media (max-width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>emSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">em) {            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">        }    `</span></span>    <span class="token keyword">return</span> accumulator<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>이제 미디어 템플릿을 정의했으니, 다음과 같이 사용할 수 있다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Container <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`    color: #333;    ${media.desktop`</span></span>padding<span class="token punctuation">:</span> <span class="token number">0</span> 20px<span class="token punctuation">;</span><span class="token template-string"><span class="token string">`}    ${media.tablet`</span></span>padding<span class="token punctuation">:</span> <span class="token number">0</span> 10px<span class="token punctuation">;</span><span class="token template-string"><span class="token string">`}    ${media.phone`</span></span>padding<span class="token punctuation">:</span> <span class="token number">0</span> 5px<span class="token punctuation">;</span><span class="token template-string"><span class="token string">`}`</span></span></code></pre><h3 id="Refs-to-DOM-Nodes"><a href="#Refs-to-DOM-Nodes" class="headerlink" title="Refs to DOM Nodes"></a>Refs to DOM Nodes</h3><p>Styled Component에 <code>ref</code>를 넘겨주면 <code>StyledComponent</code> 레퍼에 ref를 넘겨줄 것이다. 그래서 <code>focus</code>같은 DOM 메서드들을 호출할 수 없다. 래핑된 DOM 노드에 대한 <code>ref</code>를 가져오려면 <code>innerRef</code> 프로퍼티를 넘겨야 한다.</p><blockquote><p><strong>주의</strong>: <code>innerRef</code>는 콜백 ref(<code>ref = {comp =&gt; this.bla = comp</code>)와 (React 16.3부터 사용가능한) <code>React.createRef()</code>로 만든 ref를 지원한다.  refs 기반 문자열이 미래에 버려질 것이기 때문에 너무 걱정하지 말고, <code>createRef()</code> 혹은 콜백 패턴을 사용해라.</p></blockquote><p>다음은 <code>createRef()</code>를 사용한 예제다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> StyledInput <span class="token operator">=</span> styled<span class="token punctuation">.</span>input<span class="token template-string"><span class="token string">`    color: paleviolet;`</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StyledInput</span> <span class="token attr-name">innerRef</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>콜백을 사용하면 이렇다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> StyledInput <span class="token operator">=</span> styled<span class="token punctuation">.</span>input<span class="token template-string"><span class="token string">`    color: paleviolet;`</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StyledInput</span> <span class="token attr-name">innerRef</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> comp <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt;는 React 컴포넌트를 스타일링하기 위한 라이브러리다.&lt;br&gt;개인 프로젝트에 이 라이브러리를 적용하기 위한 자료를 찾던 중 &lt;a href=&quot;https://github.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>( 번역 ) Refs and the DOM</title>
    <link href="https://github.com/haeguri/2018/07/29/react-refs/"/>
    <id>https://github.com/haeguri/2018/07/29/react-refs/</id>
    <published>2018-07-29T04:18:50.000Z</published>
    <updated>2018-08-20T14:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리엑트 문서의 “Refs and the DOM”을 번역한 자료<br>원문 : <a href="https://reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">https://reactjs.org/docs/refs-and-the-dom.html</a></p></blockquote><p>Ref는 DOM 노드 혹은 <code>render</code> 메서드로 생성된 리엑트 엘리먼트에 접근할 수 있는 방법을 제공한다.</p><p>일반적인 리엑트 데이터 플로우에서는 <a href="https://reactjs.org/docs/components-and-props.html" target="_blank" rel="noopener">props</a>만이 부모 컴포넌트와 자식 컴포넌트와 상호작용할 수 있는 유일한 방법이다. 자식을 수정하기 위해서는 새로운 props을 넘겨줘야 자식이 다시 렌더링된다. 하지만 몇 가지 예외 경우에는 일반적인 데이터 플로에서 벗어나 긴급하게 자식을 수정해야 할 경우가 있다. 여기서 말하는 자식은 리엑트 컴포넌트의 인스턴스이거나 DOM 요소일 수도 있다. 이러한 경우, 리엑트는 비상용 탈출구를 제공한다.</p><h3 id="언제-Ref를-쓰는가"><a href="#언제-Ref를-쓰는가" class="headerlink" title="언제 Ref를 쓰는가?"></a>언제 Ref를 쓰는가?</h3><p>Ref를 사용하면 좋은 몇 가지의 경우가 있다.</p><ul><li>포커스, 텍스트 선택, 미디어 재생을 다룰 때</li><li>애니메이션을 시작할 때</li><li>써드-파티 DOM 라이브러리와 상호작용</li></ul><p>선언적으로 수행할 수 있는 모든 것에 대해서는 Ref를 사용하지 마라.</p><p>예를 들어서, <code>Dialog</code> 컴포넌트의 <code>open()</code>과 <code>close()</code> 메서드를 외부에 노출하는 것 대신에 <code>Dialog</code> 컴포넌트로 <code>isOpen</code> prop을 넘겨줘라.</p><h3 id="Ref를-남용하지-마라"><a href="#Ref를-남용하지-마라" class="headerlink" title="Ref를 남용하지 마라"></a>Ref를 남용하지 마라</h3><p>당신은 처음에 Ref를 당신의 앱에서 “무언가를 일어나도록 하기 위해” 사용할 것이다. 이 경우에는 시간을 갖고 컴포넌트 계층에서 상태를 소유해야 하는 장소에 대해서 비판적으로 생각해봐라. 보통은 상태를 소유하는 적절한 장소가 더 높은 위치에 있는 것을 알게 된다. 이러한 경우에는 <a href="https://reactjs.org/docs/lifting-state-up.html" target="_blank" rel="noopener">Lifting State Up</a> 가이드를 읽어봐라.</p><blockquote><p><strong>주의</strong><br>아래의 예제는 16.3에서 소개된 <code>React.createRef()</code> API를 사용하도록 업데이트됐다. 만약 이전의 React 버전을 사용한다면 <a href="#callback-refs">callback refs</a>를 사용하는 것을 권한다.</p></blockquote><h3 id="Ref-만들기"><a href="#Ref-만들기" class="headerlink" title=" Ref 만들기"></a><a id="creating-refs"></a> Ref 만들기</h3><p>Ref는 <code>React.createRef()</code>로 만들어지며 <code>ref</code> 속성으로 리엑트 엘리먼트와 연결한다. 보통 Ref는 컴포넌트가 생성될 때 인스턴스 프로퍼티로 연결되서 컴포넌트를 통해 참조될 수 있게 된다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Ref에-접근하기"><a href="#Ref에-접근하기" class="headerlink" title="Ref에 접근하기"></a>Ref에 접근하기</h3><p>Ref가 <code>render</code>에서 엘리먼트로 전달되면, 노드에 대한 참조는 ref의 <code>current</code> 속성에서 접근할 수 있게 된다.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span></code></pre><p>Ref의 값은 노드의 유형에 따라 달라진다.</p><ul><li><code>ref</code> 속성이 HTML 엘리먼트에서 사용될 때에는 생성자에서 <code>Reac.createRef()</code>로 만들어지는 <code>ref</code>는 <code>current</code> 프로퍼티를 통해 DOM 엘리먼트를 받게 된다.</li><li><code>ref</code> 속성이 커스텀 클래스 컴포넌트에서 사용될 때, <code>ref</code> 객체는 <code>current</code>를 통해 마운트된 컴포넌트의 인스턴스를 받는다.</li><li><strong>함수 컴포넌트는 인스턴스가 없기 때문에 <code>ref</code> 속성은 사용할 수 없다.</strong></li></ul><p>아래의 예제들은 차이점을 보여준다.</p><h4 id="Ref를-DOM-엘리먼트에-추가하기"><a href="#Ref를-DOM-엘리먼트에-추가하기" class="headerlink" title="Ref를 DOM 엘리먼트에 추가하기"></a>Ref를 DOM 엘리먼트에 추가하기</h4><p>이 코드는 <code>ref</code>를 DOM 노드에 대한 참조를 저장하기 위해 사용한다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// textInput DOM 엘리먼트를 저장하기 위한 ref를 만든다.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// DOM API를 이용하여 명시적으로 텍스트 입력을 포커스한다.</span>        <span class="token comment" spellcheck="true">// 주의: DOM 노드를 가져오기 위해 `current`에 접근하고 있음.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// React에게 우리가 생성자에서 만들었던 `textInput` 프로퍼티에 &lt;input> ref를 연결하고 싶다고 말한다.</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>                    <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>                    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Focus</span> <span class="token attr-name">the</span> <span class="token attr-name">text</span> <span class="token attr-name">input"</span>                    <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">}</span></span>                <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>리엑트는 컴포넌트가 마운트 될 때 DOM 요소를 <code>current</code> 프로퍼티에 할당할 것이며 컴포넌트가 언마운트되면 다시 <code>null</code>을 할당할 것이다. <code>ref</code>는 <code>componentDidMount</code> 혹은 <code>componentDidUpdate</code> 라이프 사이클 훅이 실행되기 전에 갱신된다.</p><h4 id="Ref를-클래스-컴포넌트에-추가하기"><a href="#Ref를-클래스-컴포넌트에-추가하기" class="headerlink" title="Ref를 클래스 컴포넌트에 추가하기"></a><a id="adding-ref-to-class-comp"></a>Ref를 클래스 컴포넌트에 추가하기</h4><p>만약 위의 <code>CustomTextInput</code>을 래핑해서 컴포넌트가 마운트되면 입력이 클릭된 것처럼 하려는 경우, ref를 통해서 커스텀 입력에 접근하고, <code>focusTextInput</code> 메서드를 수동으로 호출할 수 있다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">AutoFocusTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomTextInput</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>CustomTextInput</code>가 클래스로서 선언되어야만 동작할 수 있음을 유의해라.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h4 id="Ref와-함수형-컴포넌트"><a href="#Ref와-함수형-컴포넌트" class="headerlink" title="Ref와 함수형 컴포넌트"></a>Ref와 함수형 컴포넌트</h4><p>함수형 컴포넌트들은 인스턴스가 없기 때문에 <strong> <code>ref</code> 속성을 가질 수 없을 것이다.</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyFunctionalComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 이것은 동작하지 않을 것이다!</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyFunctionalComponent</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>만약 컴포넌트에 대한 ref가 필요하다면 라이프 사이클 메서드나 상태가 필요할 경우와 마찬가지로 함수형 컴포넌트들은 클래스로 변환해야 한다.</p><p>그러나 <strong>함수형 컴포넌트 내에서</strong> DOM 엘리먼트 혹은 클래스 컴포넌트를 참조한다면 <strong>ref 속성을 사용할 수 있다</strong>.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">CustomTextInput</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// textInput은 여기서 선언되어야 ref가 DOM 엘리먼트를 참조할 수 있다.</span>    <span class="token keyword">let</span> textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>                <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>                <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Focus</span> <span class="token attr-name">the</span> <span class="token attr-name">text</span> <span class="token attr-name">input"</span>                <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span>            <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="부모-컴포넌트에-DOM-Ref를-노출하기"><a href="#부모-컴포넌트에-DOM-Ref를-노출하기" class="headerlink" title="부모 컴포넌트에 DOM Ref를 노출하기"></a>부모 컴포넌트에 DOM Ref를 노출하기</h3><p>드문 경우에 부모 컴포넌트에서 자식의 DOM 노드에 접근하기를 원할 수 있다. 이것은 컴포넌트 캡슐화를 망가뜨리기 때문에 일반적으로 추천되지 않지만, 포커스를 주거나 자식 DOM 노드의 크기나 포지션을 측정할 때 유용할 수 있다.</p><p>위에서 <a href="#adding-ref-to-class-comp">자식 컴포넌트에 ref를 추가할 수 있었지만</a>, DOM 노드보다는 컴포넌트 인스턴스만을 가져오기 때문에 이것은 이상적인 해결책이 아니다. 덧붙이면 이것은 함수형 컴포넌트로도 할 수 없다.</p><p>이러한 경우에서 리엑트 16.3 이상을 사용한다면 <a href="https://reactjs.org/docs/forwarding-refs.html" target="_blank" rel="noopener">ref forwarding</a>을 추천한다. Ref Forwarding은 컴포넌트가 자식 컴포넌트의 ref를 노출하는 것을 선택할 수 있게 한다. 자식의 DOM 노드를 부모 컴포넌트에 노출하는 방법에 대한 자세한 예제는 <a href="https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-componentsV" target="_blank" rel="noopener">ref forwarding 문서</a>에서 찾을 수 있다.</p><p>만약 리엑트 16.2 이하을 사용하거나 ref forwarding에 의해 제공되는 기능보다 유연해야 한다면, <a href="https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509" target="_blank" rel="noopener">이 대안</a>을 사용하거나 다르게 명명된 prop으로 ref를 명시적으로 넘겨줄 수 있다.</p><p>가능하다면, DOM 노드를 노출하지 않을 것을 권장하지만, 때때로 유용할 수 있다. 이 접근 법은 자식 컴포넌트에 어떤 코드를 추가해야 할 경우의 접근 법이다. 만약 자식 컴포넌트 구현체를 변경할 수 없다면 마지막 선택지는 <a href="https://reactjs.org/docs/react-dom.html#finddomnode" target="_blank" rel="noopener">findDOMNode</a>를 사용하는 것이지만, 실망스러울 것이다.</p><h3 id="Callback-Refs"><a href="#Callback-Refs" class="headerlink" title=" Callback Refs"></a><a id="callback-refs"></a> Callback Refs</h3><p>리엑트는 Ref를 설정하기 위한 또 다른 방법인 ‘callback refs’를 제공한다. ‘callback refs’는 Ref가 설정되고 해제될 때 더욱 세세한 제어를 하게 한다.</p><p><code>createRef( )</code>로 만든 <code>ref</code>속성을 넘겨주는 대신에, 함수를 넘겨줄 수 있다. 함수는 리엑트 컴포넌트 인스턴스 혹은 HTML DOM 엘리먼트를 인자로 받는다. 그리고 인자는 다른 곳에 저장하고, 접근할 수 있다.</p><p>아래의 예제는 인스턴스 프로퍼티에서 DOM 노드에 접근할 참조를 저장하기 위한 <code>ref</code> 콜백을 사용하는 일반적인 패턴을 구현한다. </p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setTextInputRef <span class="token operator">=</span> element <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 원래의 DOM API를 이용하여 텍스트 입력을 포커싱한다</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 마운트됐을 때 입력을 포커싱을 한다.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 인스턴스 필드(`this.textInput`)에 텍스트 입력 DOM 엘리먼트에 대한</span>        <span class="token comment" spellcheck="true">// 참조를 저장하기 위해 `ref` 콜백을 사용한다</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>                    <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setTextInputRef<span class="token punctuation">}</span></span>                <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>                    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Focus</span> <span class="token attr-name">the</span> <span class="token attr-name">text</span> <span class="token attr-name">input"</span>                    <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">}</span></span>                <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>리엑트는 컴포넌트가 마운트되면 DOM 엘리먼트를 파라메터로 <code>ref</code> 콜백을 실행할 것이다. 그리고 언마운트되면 <code>null</code>을 파라메터로 호출할 것이다. Ref는 <code>componentDidMount</code> 혹은 <code>componentDidUpdate</code>가 호출되기 전에 최신 상태로 보장된다.</p><p><code>React.createRef()</code>로 만든 객체 Ref와 같이 컴포넌트 사이에서 Ref 콜백을 넘겨줄 수 있다. 컴포넌트 사이에서 콜백을 호출할 수 있다</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">CustomTextInput</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomTextInput</span>                <span class="token attr-name">inputRef</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>el <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputElement <span class="token operator">=</span> el<span class="token punctuation">}</span></span>            <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>위의 예제에서, <code>Parent</code>는 ref 콜백을 <code>inputRef</code> prop으로 <code>CustomTextInput</code>에 넘겨준다. <code>CustomTextInput</code>은 넘겨받은 함수를 특별한 <code>ref</code> 속성으로써  <code>&lt;input&gt;</code>로 넘긴다.</p><h3 id="레거시-API-문자열-Ref"><a href="#레거시-API-문자열-Ref" class="headerlink" title="레거시 API: 문자열 Ref"></a>레거시 API: 문자열 Ref</h3><p>예전에 리엑트를 사용했다면 <code>ref</code> 속성이 <code>”textInput&quot;</code>과 같이 문자열이고, DOM 노드를 <code>this.refs.textInput</code>으로 접근하는 오래된 API에 더 친숙할 것이다. 문자열 Ref는 <a href="https://github.com/facebook/react/pull/8333#issuecomment-271648615">어떤 이슈</a>들을 가져서 레거시로 간주됐고, 앞으로의 릴리즈에서 제거될 것이기 때문에 문자열 Ref를 사용하는 일은 피해라</p><blockquote><p><strong>주의</strong><br>Ref에 접근하기 위해 <code>this.refs.textInput</code>를 사용하고 있다면, <a href="#callback-refs">콜백 패턴</a>이나 <a href="#creating-refs">createRef API</a>를 대신에 사용할 것을 권장한다.</p></blockquote><h3 id="Callback-Refs를-사용할-때-주의사항"><a href="#Callback-Refs를-사용할-때-주의사항" class="headerlink" title="Callback Refs를 사용할 때 주의사항"></a>Callback Refs를 사용할 때 주의사항</h3><p><code>ref</code> 콜백이 인라인 함수로 정의된다면 컴포넌트가 업데이트되는 동안 두 번 호출될 것이다. 첫 번째는 <code>null</code>, 그 다음에는 DOM 엘리먼트가 파라메터로 넘어간다. 이것은 각각의 <code>render</code> 메서드로 함수의 새 인스턴스가 만들어지기 때문인데, 그래서 리엑트는 예전의 ref를 비워우고 새로운 것으로 설정해줄 필요가 있다. <code>ref</code> 콜백을 클래스에 바운드된 메서드로 정의하면 이것을 피할 수 있지만, 대부분의 경우에서는 문제가 되지 않음을 기억해라.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리엑트 문서의 “Refs and the DOM”을 번역한 자료&lt;br&gt;원문 : &lt;a href=&quot;https://reactjs.org/docs/refs-and-the-dom.html&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
  </entry>
  
</feed>
