{
    "componentChunkName": "component---src-pages-mdx-slug-tsx",
    "path": "/clean-up-jest-mock/",
    "result": {"data":{"mdx":{"id":"7739dfbf-a849-5155-9f0b-ed2334f7ae8e","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jest에서 Mock을 정리하는 방법\",\n  \"date\": \"2020-12-21T01:05:23.000Z\",\n  \"tags\": [\"frontend\", \"test\", \"jest\", \"mock\"],\n  \"disqus_id\": \"2020/12/21/clean-up-jest-mock/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"\\uC18C\\uAC1C\"), mdx(\"p\", null, \"\\uD14C\\uC2A4\\uD2B8\\uC5D0\\uC11C\\uB294 Mock\\uC744 \\uD14C\\uC2A4\\uD2B8 \\uB300\\uC5ED(Test Double)\\uC73C\\uB85C \\uBD80\\uB978\\uB2E4. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uD14C\\uC2A4\\uD2B8 \\uB300\\uC5ED\"), \"\\uC740 \\uAD6C\\uD604 \\uCF54\\uB4DC\\uB97C \\uD14C\\uC2A4\\uD2B8\\uD558\\uB294\\uB370 \\uD544\\uC694\\uD55C \\uAC83(\\uAC1D\\uCCB4, \\uD568\\uC218, \\uB370\\uC774\\uD130 \\uB4F1)\\uB4E4\\uC744 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uD14C\\uC2A4\\uD2B8\\uB97C \\uC2E4\\uD589\\uD558\\uB294 \\uB3D9\\uC548\"), \" \\uB300\\uC2E0\\uD558\\uB294 \\uC694\\uC18C\\uB4E4\\uC744 \\uB9D0\\uD55C\\uB2E4. \\uD14C\\uC2A4\\uD2B8 \\uB300\\uC5ED\\uC774 \\uAD6C\\uD604 \\uCF54\\uB4DC\\uB97C \\uC7A0\\uAE50 \\uB300\\uC2E0\\uD55C\\uB2E4\\uB294 \\uC810\\uC5D0\\uC11C \\uC601\\uD654 \\uCD2C\\uC601\\uD560 \\uB54C \\uC561\\uC158 \\uC5F0\\uAE30\\uB97C \\uB300\\uC2E0\\uD574\\uC8FC\\uB294 \\uC2A4\\uD134\\uD2B8 \\uBC30\\uC6B0\\uC640 \\uBE44\\uC2B7\\uD558\\uB2E4.\"), mdx(\"h3\", null, \"\\uC65C \\uC815\\uB9AC\\uD574\\uC57C \\uD558\\uB294\\uAC00?\"), mdx(\"p\", null, \"\\uB2E4\\uC74C \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uB97C \\uC2E4\\uD589\\uD558\\uAE30 \\uC804\\uC5D0\\uB294 \\uD604\\uC7AC \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD588\\uB358 Mock\\uC744 \\uC815\\uB9AC\\uD574\\uC8FC\\uB294 \\uAC83\\uC774 \\uC88B\\uB2E4. \\uB2E4\\uC74C \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uC5D0 \\uC601\\uD5A5\\uC744 \\uC904 \\uC218\\uB3C4 \\uC788\\uAE30 \\uB54C\\uBB38\\uC774\\uB2E4. \\uC608\\uB97C \\uB4E4\\uC5B4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" \\uC758 \\uD14C\\uC2A4\\uD2B8 \\uB300\\uC5ED\\uC744 \\uB9CC\\uB4E4\\uAE30 \\uC704\\uD574 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.spyOn\"), \"\\uC744 \\uC0AC\\uC6A9\\uD55C \\uC774\\uD6C4\\uC5D0\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" \\uB294 \\uB2E4\\uB978 \\uD568\\uC218\\uAC00 \\uB420 \\uC218\\uB3C4 \\uC788\\uB2E4.\"), mdx(\"p\", null, \"\\uC544\\uB798 \\uD14C\\uC2A4\\uD2B8\\uAC00 \\uD1B5\\uACFC\\uD558\\uB294 \\uAC83\\uC73C\\uB85C \\uC704\\uC758 \\uB0B4\\uC6A9\\uC744 \\uAC80\\uC99D\\uD574\\uBCFC \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const consoleLog = console.log;\\ntest(\\\"spyOn\\uC73C\\uB85C console.log\\uB97C mocking\\uD558\\uBA74, console.log\\uB294 \\uB2E4\\uB978 \\uD568\\uC218\\uAC00 \\uB41C\\uB2E4.\\\", () => {\\n  jest.spyOn(console, \\\"log\\\");\\n  const consoleLogAfterMocking = console.log;\\n\\n  // \\uACB0\\uACFC\\uB294 Success.\\n  // console.log\\uB294 spyOn\\uC73C\\uB85C mocking\\uD55C \\uC774\\uD6C4 \\uB2E4\\uB978 \\uD568\\uC218\\uAC00 \\uB41C\\uB2E4.\\n  expect(consoleLog).not.toBe(consoleLogAfterMocking);\\n});\\n\")), mdx(\"p\", null, \"\\uBB3C\\uB860 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spyOn\"), \"\\uC740 \\uD14C\\uC2A4\\uD2B8 \\uB300\\uC5ED\\uC744 \\uB9CC\\uB4E4 \\uB54C \\uC720\\uC6A9\\uD558\\uAC8C \\uC0AC\\uC6A9\\uB420 \\uC218 \\uC788\\uC9C0\\uB9CC, \\uB2E4\\uB978 \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4 \\uC785\\uC7A5\\uC5D0\\uC11C\\uB294 \\uC0AC\\uC774\\uB4DC \\uC774\\uD399\\uD2B8\\uB97C \\uC77C\\uC73C\\uD0A8 \\uC8FC\\uBC94\\uC774 \\uB420 \\uC218 \\uC788\\uB2E4. \\uB530\\uB77C\\uC11C \\uBAA8\\uB4E0 \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uAC00 \\uB3C5\\uB9BD\\uC801\\uC73C\\uB85C \\uC2E4\\uD589\\uB418\\uAC8C \\uD558\\uAE30 \\uC704\\uD574\\uC120 mock\\uC744 \\uC815\\uB9AC\\uD558\\uB294 \\uAC83\\uC774 \\uC88B\\uB2E4.\"), mdx(\"h3\", null, \"\\uC5B4\\uB5BB\\uAC8C \\uC815\\uB9AC\\uD558\\uB294\\uAC00?\"), mdx(\"p\", null, \"Jest\\uC5D0\\uC11C mock\\uC744 \\uC815\\uB9AC\\uD560 \\uC218 \\uC788\\uB294 \\uBC29\\uBC95\\uC740 \\uD06C\\uAC8C \\uB450 \\uAC00\\uC9C0\\uAC00 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uC5D0\\uC11C \\uC218\\uB3D9\\uC73C\\uB85C mock\\uC744 \\uC815\\uB9AC\\uD558\\uAE30\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jest\\uC758 \\uC5B4\\uB5A4 \\uC124\\uC815\\uC744 \\uD65C\\uC131\\uD654\\uD574\\uC11C mock\\uC774 \\uC790\\uB3D9\\uC73C\\uB85C \\uC815\\uB9AC\\uB418\\uAC8C \\uD558\\uAE30\")), mdx(\"h2\", null, \"\\uC218\\uB3D9\\uC73C\\uB85C \\uC815\\uB9AC\\uD558\\uAE30\"), mdx(\"p\", null, \"Jest\\uC5D0\\uC11C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uC5D0\\uC11C \\uC218\\uB3D9\\uC73C\\uB85C mock\\uC744 \\uC815\\uB9AC\\uD558\\uB294 \\uBC29\\uBC95\\uC5D0\\uB3C4 \\uC5EC\\uB7EC \\uAC00\\uC9C0\\uAC00 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mockFn.mockClear\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mockFn.mockReset\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mockFn.mockRestore\"))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn\"), \" \\uC740 Jest\\uC5D0\\uC11C \\uC0DD\\uC131\\uD55C mock \\uD568\\uC218\\uB97C \\uB9D0\\uD55C\\uB2E4. \\uCC38\\uACE0\\uB85C mock \\uD568\\uC218\\uB97C \\uB9CC\\uB4DC\\uB294 \\uBC29\\uBC95\\uC5D0\\uB3C4 \\uC5EC\\uB7EC \\uAC00\\uC9C0(...)\\uAC00 \\uC788\\uB294\\uB370, \\uB300\\uD45C\\uC801\\uC73C\\uB85C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.fn\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.spyOn\"), \"\\uC774 \\uC788\\uB2E4.\"), mdx(\"p\", null, \"\\uD639\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \" \\uAC1D\\uCCB4\\uC5D0 \\uC788\\uB294 \\uBA54\\uC11C\\uB4DC\\uB85C \\uC815\\uB9AC\\uD560 \\uC218\\uB3C4 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.clearMocks\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.resetMocks\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.restoreMocks\"))), mdx(\"h3\", null, \"mockFn.mockClear\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mock.calls\"), \"\\uC640 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mock.instances\"), \" \\uBC30\\uC5F4\\uC744 \\uCD08\\uAE30\\uD654\\uD55C\\uB2E4. \\uB2E4\\uC74C \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uB97C \\uC2E4\\uD589\\uD558\\uAE30 \\uC804\\uC5D0 mock \\uD568\\uC218\\uB97C \\uD638\\uCD9C\\uD588\\uB358 \\uC815\\uBCF4\\uB97C \\uBE44\\uC6B0\\uACE0 \\uC2F6\\uC744 \\uB54C \\uC720\\uC6A9\\uD558\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mock.calls\"), \" \\uC5D0\\uB294 mock \\uD568\\uC218\\uAC00 \\uD568\\uC218\\uB85C \\uD638\\uCD9C\\uB410\\uC744 \\uB54C\\uC758 \\uB9E4\\uAC1C\\uBCC0\\uC218\\uC758 \\uBAA9\\uB85D\\uC774 \\uC788\\uACE0, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mock.instances\"), \" \\uB294 mock \\uD568\\uC218\\uAC00 \\uC0DD\\uC131\\uC790\\uB85C \\uD638\\uCD9C\\uB410\\uC744 \\uB54C \\uC0DD\\uC131\\uD588\\uB358 \\uC778\\uC2A4\\uD134\\uC2A4\\uC758 \\uBAA9\\uB85D\\uC774 \\uC788\\uB2E4.\")), mdx(\"p\", null, \"\\uC608\\uB97C \\uB4E4\\uC5B4\\uC11C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.fn\"), \" \\uC73C\\uB85C mock \\uD568\\uC218\\uB97C \\uC0DD\\uC131\\uD558\\uACE0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mockClear\"), \" \\uB85C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mock.calls\"), \" \\uC640 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mock.instances\"), \" \\uB97C \\uCD08\\uAE30\\uD654\\uD55C\\uB2E4\\uB294 \\uB0B4\\uC6A9\\uC740 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC740 \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB85C \\uD655\\uC778\\uD574\\uBCFC \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"test(\\\"mock \\uD568\\uC218\\uB97C \\uD638\\uCD9C\\uD55C \\uD6C4 mockClear\\uB97C \\uD638\\uCD9C\\uD558\\uBA74, mock.calls\\uB294 \\uCD08\\uAE30\\uD654\\uB41C\\uB2E4.\\\", () => {\\n  const mockFn = jest.fn();\\n  mockFn(\\\"1\\\");\\n  mockFn(\\\"1\\\", \\\"2\\\");\\n  expect(mockFn.mock.calls[0]).toEqual([\\\"1\\\"]);\\n  expect(mockFn.mock.calls[1]).toEqual([\\\"1\\\", \\\"2\\\"]);\\n  expect(mockFn.mock.calls).toHaveLength(2);\\n\\n  mockFn.mockClear();\\n\\n  expect(mockFn.mock.calls).toHaveLength(0);\\n});\\n\\ntest(\\\"mock \\uC0DD\\uC131\\uC790\\uB97C \\uD638\\uCD9C\\uD55C \\uD6C4 mockClear\\uB97C \\uD638\\uCD9C\\uD558\\uBA74, mock.instances\\uB294 \\uCD08\\uAE30\\uD654\\uB41C\\uB2E4.\\\", () => {\\n  const MockConstructor = jest.fn();\\n  const a = new MockConstructor();\\n  const b = new MockConstructor();\\n  expect(MockConstructor.mock.instances).toHaveLength(2);\\n  expect(MockConstructor.mock.instances[0]).toBe(a);\\n  expect(MockConstructor.mock.instances[1]).toBe(b);\\n\\n  MockConstructor.mockClear();\\n\\n  expect(MockConstructor.mock.instances).toHaveLength(0);\\n});\\n\")), mdx(\"h3\", null, \"mockFn.mockReset\"), mdx(\"p\", null, \"\\uC774 \\uD568\\uC218\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mockClear()\"), \" \\uD568\\uC218\\uAC00 \\uD558\\uB294 \\uC77C\\uC744 \\uBAA8\\uB450 \\uD560 \\uC218 \\uC788\\uB2E4. \\uC774\\uAC83\\uC5D0 \\uB354\\uD574 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mockReset\"), \"\\uC740 mock \\uD568\\uC218\\uC758 \\uAD6C\\uD604(ex. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.fn()\"), \" \\uC5D0 \\uB118\\uAE30\\uB294 \\uD568\\uC218)\\uC744 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" \\uC744 \\uBC18\\uD658\\uD558\\uB294 \\uBE48 \\uD568\\uC218\\uB85C \\uCD08\\uAE30\\uD654\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"test(\\\"mock \\uD568\\uC218\\uB97C \\uD638\\uCD9C\\uD55C \\uD6C4 mockReset\\uC744 \\uD638\\uCD9C\\uD558\\uBA74, mock \\uD568\\uC218\\uB294 undefined\\uC744 \\uBC18\\uD658\\uD558\\uB294 \\uD568\\uC218\\uAC00 \\uB41C\\uB2E4.\\\", () => {\\n  const mockAdd = jest.fn((a, b) => a + b);\\n  expect(mockAdd(1, 2)).toBe(3);\\n  expect(mockAdd.getMockImplementation()).toBe(add);\\n\\n  mockAdd.mockReset();\\n\\n  expect(mockAdd(1, 2)).toBe(undefined);\\n  expect(mockAdd.getMockImplementation()).toBe(undefined);\\n});\\n\")), mdx(\"h3\", null, \"mockFn.mockRestore\"), mdx(\"p\", null, \"\\uC774 \\uD568\\uC218\\uB3C4 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockReset\"), \"\\uC774 \\uADF8\\uB7AC\\uB358 \\uAC83\\uCC98\\uB7FC \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockReset\"), \" \\uD568\\uC218\\uAC00 \\uD558\\uB294 \\uC77C\\uC744 \\uBAA8\\uB450 \\uD560 \\uC218 \\uC788\\uB2E4. \\uC774\\uAC83\\uC5D0 \\uB354\\uD574 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mockRestore\"), \"\\uB294 mocking \\uD558\\uBA74\\uC11C \\uC624\\uC5FC\\uB41C(?) \\uD568\\uC218\\uB97C \\uB2E4\\uC2DC \\uC6D0\\uB798\\uB300\\uB85C \\uB418\\uB3CC\\uB9B4 \\uC218 \\uC788\\uB2E4. \\uB9D0\\uB85C \\uC124\\uBA85\\uD558\\uBA74 \\uBCF5\\uC7A1\\uD558\\uB2C8, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockRestore\"), \"\\uAC00 \\uD544\\uC694\\uD55C \\uC774\\uC720\\uB97C \\uCF54\\uB4DC\\uB85C \\uC0B4\\uD3B4\\uBCF4\\uC790.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const someModule = { api: () => \\\"origin\\\" };\\ntest(\\\"spyOn\\uC73C\\uB85C \\uD14C\\uC2A4\\uD2B8 \\uB354\\uBE14\\uC744 \\uB9CC\\uB4E0 \\uB4A4\\uC5D0, someModule.api\\uB294 \\uB2E4\\uB978 \\uD568\\uC218\\uAC00 \\uB41C\\uB2E4.\\\", () => {\\n  const originApi = someModule.api;\\n  const mockApi = jest.spyOn(someModule, \\\"api\\\");\\n\\n  const changedApi = someModule.api;\\n  expect(originApi).not.toBe(changedApi);\\n  expect(changedApi()).toBe(\\\"mock\\\");\\n});\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.spyOn\"), \" \\uC740 \\uAC1D\\uCCB4\\uC758 \\uBA54\\uC11C\\uB4DC\\uB97C \\uD14C\\uC2A4\\uD2B8 \\uB300\\uC5ED\\uC73C\\uB85C \\uC0AC\\uC6A9\\uD558\\uACE0 \\uC2F6\\uC744 \\uB54C \\uC720\\uC6A9\\uD558\\uB2E4. \\uD558\\uC9C0\\uB9CC \\uC774 \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uB97C \\uC2E4\\uD589\\uD558\\uACE0 \\uB098\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"someModule.api\"), \" \\uB294 \\uB2E4\\uB978 \\uD568\\uC218\\uAC00 \\uB41C\\uB2E4. \\uC815\\uB9AC\\uD574\\uC8FC\\uC9C0 \\uC54A\\uC73C\\uBA74 \\uB2E4\\uC74C \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uC5D0\\uC11C \\uC758\\uB3C4\\uD558\\uC9C0 \\uC54A\\uC740 \\uACB0\\uACFC\\uAC00 \\uB098\\uD0C0\\uB0A0 \\uC218\\uB3C4 \\uC788\\uB2E4. \\uB9CC\\uC57D \\uAC1D\\uCCB4\\uC758 \\uBA54\\uC11C\\uB4DC\\uB97C mocking\\uD588\\uB2E4\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockRestore\"), \"\\uB97C \\uD638\\uCD9C\\uD558\\uC5EC \\uC6D0\\uB798\\uB300\\uB85C \\uB418\\uB3CC\\uB824\\uC918\\uC57C \\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const someModule = { api: () => \\\"origin\\\" };\\ntest(\\\"spyOn\\uC73C\\uB85C \\uD14C\\uC2A4\\uD2B8 \\uB354\\uBE14\\uC744 \\uB9CC\\uB4E0 \\uB4A4\\uC5D0 mockRestore\\uB97C \\uD638\\uCD9C\\uD558\\uBA74, someModule.api\\uB294 \\uC6D0\\uB798\\uB300\\uB85C \\uB3CC\\uC544\\uC628\\uB2E4.\\\", () => {\\n  const originApi = someModule.api;\\n  const mockApi = jest.spyOn(someModule, \\\"api\\\");\\n\\n  mockApi.mockRestore();\\n  const changedApi = someModule.api;\\n\\n  expect(originApi).toBe(changedApi);\\n  expect(changedApi()).toBe(\\\"origin\\\");\\n});\\n\")), mdx(\"p\", null, \"\\uC8FC\\uC758\\uD574\\uC57C \\uD560 \\uAC83\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.fn\"), \" \\uC73C\\uB85C \\uB9CC\\uB4E4\\uC5B4\\uC9C4 mock \\uD568\\uC218\\uC5D0\\uC11C\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn.mockRestore\"), \" \\uAC00 \\uB3D9\\uC791\\uD558\\uC9C0 \\uC54A\\uB294 \\uC810\\uC774\\uB2E4. \\uB530\\uB77C\\uC11C \\uC5B4\\uB5A4 \\uAC1D\\uCCB4\\uC758 \\uBA54\\uC11C\\uB4DC\\uB97C \\uD14C\\uC2A4\\uD2B8 \\uB300\\uC5ED\\uC73C\\uB85C \\uC0AC\\uC6A9\\uD558\\uACE0 \\uC2F6\\uC744 \\uB54C\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.spyOn\"), \"\\uC744 \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uC774 \\uB354 \\uD3B8\\uB9AC\\uD558\\uACE0 \\uC548\\uC804\\uD558\\uB2E4.\"), mdx(\"h3\", null, \"clear vs reset vs restore\"), mdx(\"p\", null, \"mock \\uD568\\uC218\\uB97C \\uC815\\uB9AC\\uD558\\uB294 \\uBC29\\uBC95\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockClear\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockReset\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockRestore\"), \" \\uC21C\\uC73C\\uB85C \\uAC15\\uB825(?)\\uD558\\uB2E4. \\uC774\\uB294 Jest \\uC18C\\uC2A4\\uCF54\\uB4DC\\uB97C \\uC0B4\\uD3B4\\uBD10\\uB3C4 \\uC54C \\uC218 \\uC788\\uB2E4. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockRestore\"), \"\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockReset\"), \"\\uC744 \\uD638\\uCD9C\\uD558\\uACE0, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockReset\"), \"\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockClear\"), \"\\uB97C \\uD638\\uCD9C\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"// jest-mock/src/index.ts\\nclass ModuleMocker {\\n  // ...\\n  _makeComponent(metadata, restore) {\\n    // ...\\n    const f = this._createMockFunction(metaData, mockConstructor);\\n\\n    f.mockClear = () => {\\n      this._mockState.delete(f);\\n      return f;\\n    };\\n\\n    f.mockReset = () => {\\n      f.mockClear();\\n      this._mockConfigRegistry.delete(f);\\n      return f;\\n    };\\n\\n    f.mockRestore = () => {\\n      f.mockReset();\\n      return restore ? restore() : undefined;\\n    };\\n    // ...\\n  }\\n}\\n\")), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"jest\"), \"\\uB85C mock \\uC815\\uB9AC\\uD558\\uAE30\"), mdx(\"p\", null, \"Jest\\uC5D0\\uC11C \\uC81C\\uACF5\\uD558\\uB294 \\uAC1D\\uCCB4\\uC778 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \"\\uB97C \\uD65C\\uC6A9\\uD558\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn\"), \"\\uB9C8\\uB2E4 mock\\uC744 \\uC815\\uB9AC\\uD558\\uB294 \\uBC88\\uAC70\\uB85C\\uC6C0\\uC744 \\uC870\\uAE08 \\uC904\\uC77C \\uC218 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.clearAllMocks\"), \" : \\uBAA8\\uB4E0 mock \\uD568\\uC218\\uC5D0\\uC11C \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mockFn.clearAllMocks\"), \" \\uC744 \\uD638\\uCD9C\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.resetAllMocks\"), \" : \\uBAA8\\uB4E0 mock \\uD568\\uC218\\uC5D0\\uC11C \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mockFn.resetAllMocks\"), \" \\uC744 \\uD638\\uCD9C\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.restoreAllMocks\"), \" : \\uBAA8\\uB4E0 mock \\uD568\\uC218\\uC5D0\\uC11C \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mockFn.restoreAllMocks\"), \" \\uC744 \\uD638\\uCD9C\\uD55C\\uB2E4.\")), mdx(\"h2\", null, \"\\uC790\\uB3D9\\uC73C\\uB85C \\uC815\\uB9AC\\uD558\\uAE30\"), mdx(\"p\", null, \"\\uD655\\uC2E4\\uD788 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \" \\uAC1D\\uCCB4\\uC5D0 \\uC788\\uB294 \\uBA54\\uC11C\\uB4DC\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uC774 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mockFn\"), \"\\uC5D0 \\uC788\\uB294 \\uC815\\uB9AC \\uBA54\\uC11C\\uB4DC\\uB97C \\uC9C1\\uC811 \\uD638\\uCD9C\\uD558\\uB294 \\uAC83\\uBCF4\\uB2E4\\uB294 \\uC26C\\uC6B4 \\uBC29\\uBC95\\uC774\\uB2E4. \\uD558\\uC9C0\\uB9CC \\uC5EC\\uC804\\uD788 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"afterEach\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"beforeEach\"), \" \\uC640 \\uAC19\\uC740 \\uD568\\uC218\\uB85C \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uAC00 \\uC2E4\\uD589\\uB418\\uAE30 \\uC804\\uC774\\uB098, \\uD6C4\\uC5D0 \\uC815\\uB9AC\\uD574\\uC918\\uC57C \\uD558\\uB294 \\uBC88\\uAC70\\uB85C\\uC6C0\\uC774 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"beforeEach(() => {\\n  jest.restoreAllMocks();\\n});\\n\\ntest(\\\"\\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4 1\\\", () => {\\n  // ...\\n});\\n\\ntest(\\\"\\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4 2\\\", () => {\\n  // ...\\n});\\n\")), mdx(\"p\", null, \"\\uAC00\\uC7A5 \\uAC04\\uB2E8\\uD55C \\uBC29\\uBC95\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.config.js\"), \" \\uC124\\uC815\\uAC12\\uC744 \\uBCC0\\uACBD\\uD558\\uB294 \\uAC83\\uC774\\uB2E4. Jest \\uC124\\uC815\\uC744 \\uC218\\uC815\\uD574\\uC11C \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uB97C \\uC2E4\\uD589\\uD558\\uAE30 \\uC804\\uC5D0 \\uC54C\\uC544\\uC11C mock\\uC774 \\uC815\\uB9AC\\uB418\\uAC8C \\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"clearMocks\"), \" (default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \"): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.clearAllMocks\"), \" \\uB97C \\uAC01 \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uB97C \\uC2E4\\uD589\\uD558\\uAE30 \\uC804\\uC5D0 \\uD638\\uCD9C\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resetMocks\"), \" (default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \"): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.restAllMocks\"), \" \\uB97C \\uAC01 \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uB97C \\uC2E4\\uD589\\uD558\\uAE30 \\uC804\\uC5D0 \\uD638\\uCD9C\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"restoreMocks\"), \" (default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \"): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.restoreAllMocks\"), \" \\uB97C \\uAC01 \\uD14C\\uC2A4\\uD2B8 \\uCF00\\uC774\\uC2A4\\uB97C \\uC2E4\\uD589\\uD558\\uAE30 \\uC804\\uC5D0 \\uD638\\uCD9C\\uD55C\\uB2E4.\")), mdx(\"p\", null, \"\\uC55E\\uC5D0\\uC11C \\uC124\\uBA85\\uD55C \\uAC83\\uCC98\\uB7FC \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restore\"), \" \\uC791\\uC5C5\\uC5D0\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reset\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clear\"), \" \\uAC00 \\uD3EC\\uD568\\uB418\\uC5B4 \\uC788\\uB2E4. \\uB530\\uB77C\\uC11C \\uD3B8\\uD558\\uAC8C mock\\uC744 \\uC815\\uB9AC\\uD558\\uACE0 \\uC2F6\\uB2E4\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest.config.js\"), \"\\uC5D0\\uC11C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restoreMocks\"), \"\\uB9CC \\uD65C\\uC131\\uD654\\uD574\\uB3C4 \\uB41C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"module.exports = {\\n  restoreMocks: true,\\n};\\n\")), mdx(\"h2\", null, \"\\uCC38\\uACE0\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jest : \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://jestjs.io/docs/en/jest-object\"\n  }, \"https://jestjs.io/docs/en/jest-object,\"), \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://jestjs.io/docs/en/mock-function-api\"\n  }, \"https://jestjs.io/docs/en/mock-function-api\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Github Issue : \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/facebook/jest/issues/5143\"\n  }, \"mockClear vs mockReset vs mockRestore\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"소개 테스트에서는 Mock을 테스트 대역(Test Double)으로 부른다.  테스트 대역 은 구현 코드를 테스트하는데 필요한 것(객체, 함수, 데이터 등)들을  테스트를 실행하는 동안  대신하는 요소들을 말한다. 테스트 대역이 구현 코드를 잠깐 대…","frontmatter":{"title":"Jest에서 Mock을 정리하는 방법","date":"December 21, 2020","description":null,"disqus_id":"2020/12/21/clean-up-jest-mock/"}},"site":{"siteMetadata":{"url":"https://haeguri.github.io"}}},"pageContext":{"id":"7739dfbf-a849-5155-9f0b-ed2334f7ae8e","slug":"clean-up-jest-mock/","__params":{"slug":"clean-up-jest-mock"}}},
    "staticQueryHashes": ["3458129946"]}